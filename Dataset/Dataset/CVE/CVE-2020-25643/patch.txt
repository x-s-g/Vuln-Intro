@@ -390,11 +390,8 @@ static void ppp_cp_parse_cr(struct net_device *dev, int pid, int id,unsigned int req_len, const int *data)
 	}
 
 	for (opt = data; len; len -= opt[1], opt += opt[1]) {
-		if (len < 2 || len < opt[1]) {
-			dev->stats.rx_errors++;
-			kfree(out);
-			return;
-		}
+		if (len < 2 || opt[1] < 2 || len < opt[1])
+			goto err_out;
 
 		if (pid == PID_LCP)
 			switch (opt[0]) {
@@ -400,6 +397,8 @@ static void ppp_cp_parse_cr(struct net_device *dev, int pid, int id,unsigned int req_len, const int *data)
 				continue;
 
 			case LCP_OPTION_ACCM:
+				if (opt[1] < sizeof(valid_accm))
+					goto err_out;
 				if (!memcmp(opt, valid_accm,
 					    sizeof(valid_accm)))
 					continue;
@@ -406,6 +405,8 @@ static void ppp_cp_parse_cr(struct net_device *dev, int pid, int id,unsigned int req_len, const int *data)
 				}
 				break;
 			case LCP_OPTION_MAGIC:
+				if (len < 6)
+					goto err_out;
 				if (opt[1] != 6 || (!opt[2] && !opt[3] &&
 						    !opt[4] && !opt[5]))
 					break;
@@ -428,6 +429,11 @@ static void ppp_cp_parse_cr(struct net_device *dev, int pid, int id,unsigned int req_len, const int *data)
 		ppp_cp_event(dev, pid, RCR_GOOD, CP_CONF_ACK, id, req_len, data);
 
 	kfree(out);
+	return;
+
+err_out:
+	dev->stats.rx_errors++;
+	kfree(out);
 }
 
 static int ppp_rx(struct sk_buff *skb)
